import sys
import os
from lexical_analyser import tokenize
from parser import parse, TokenStream, parse_token_repr
from syntax_tree import print_tree
from layers import parse_ast, Context, semanticAssert
from xml.etree.ElementTree import tostring as xml_to_string

def main():
    if len(sys.argv) != 3:
        print('Usage: python main.py <input_file> <output_dir>')
        sys.exit(1)
        
    input_file = sys.argv[1]
    with open(input_file, 'r') as f:
        tokens = TokenStream(map(parse_token_repr, tokenize(f.read())))
        
    output_dir = sys.argv[2]
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)
        
    ast = parse(tokens)
    print_tree(ast)
    
    semanticAssert(len(ast.children) == 1, 'Multiple top-level layers')
    
    top_layer = ast.children[0]
    semanticAssert(top_layer.name == 'Canvas', 'Top-level layer must be a Canvas')
    
    canvas = parse_ast(top_layer)
    base_context = Context('white', 'black', 0, 0)
    
    for frame in range(canvas.length):
        base_context.frame = frame
        svg = canvas.to_svg(base_context)
        
        with open(f'{output_dir}/{str(frame + 1).zfill(4)}.svg', 'w') as f:
            # Write MIML comment
            f.write('<!-- Generated by MIML v0.1 -->\n')
            f.write(xml_to_string(svg).decode('utf-8'))
            
        print(f'Saved frame {frame + 1}/{canvas.length}')
    
if __name__ == '__main__':
    main()